This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-06T00:59:30.767Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    components/
      card.tsx
      meld.tsx
    types/
      cards.d.ts
    globals.css
    layout.tsx
    page.tsx
.eslintrc.json
.gitignore
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/components/card.tsx
================
import React from "react";
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import { Rank, Suit } from "../types/cards";

interface CardProps {
  rank: Rank;
  suit: Suit;
  color: "Black" | "Red";
  isFaceUp: boolean;
  id: string;
}

const Card: React.FC<CardProps> = ({ rank, suit, color, isFaceUp, id }) => {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: id,
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0 : 1,
    position: "relative" as const,
    zIndex: isDragging ? 999 : 1,
    touchAction: "none",
  };

  const suitSymbols: Record<string, string> = {
    Spades: "♠",
    Clubs: "♣",
    Diamonds: "♦",
    Hearts: "♥",
  };

  const displayRank = typeof rank === "number" ? rank.toString() : rank[0];
  const displaySuit = suitSymbols[suit];
  const cardContent = isFaceUp ? (
    <>
      <g filter="url(#filter0_d_0_342)">
        <rect x="0" y="0" width="280" height="394" rx="20" fill="#F2F2F2" />
        <rect
          x="0.5"
          y="0.5"
          width="279"
          height="393"
          rx="19.5"
          stroke="#D2D2D2"
        />
      </g>
      <text
        x="26"
        y="81"
        fontSize="64"
        fontWeight="bold"
        fill={color}
        textAnchor="start"
      >
        {displayRank}
      </text>
      <text x="24" y="166" fontSize="90" fill={color} textAnchor="start">
        {displaySuit}
      </text>
      <defs>
        <filter
          id="filter0_d_0_350"
          x="0"
          y="0"
          width="280"
          height="394"
          filterUnits="userSpaceOnUse"
          colorInterpolationFilters="sRGB"
        >
          <feFlood floodOpacity="0" result="BackgroundImageFix" />
          <feColorMatrix
            in="SourceAlpha"
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
            result="hardAlpha"
          />
          <feOffset dy="5" />
          <feGaussianBlur stdDeviation="17" />
          <feColorMatrix
            type="matrix"
            values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"
          />
          <feBlend
            mode="normal"
            in2="BackgroundImageFix"
            result="effect1_dropShadow_0_350"
          />
          <feBlend
            mode="normal"
            in="SourceGraphic"
            in2="effect1_dropShadow_0_350"
            result="shape"
          />
        </filter>
      </defs>
    </>
  ) : (
    <>
      <defs>
        <linearGradient id="gradient" x1="0" y1="0" x2="1" y2="1">
          <stop offset="0%" stopColor="#b0e0e6" />
          <stop offset="100%" stopColor="#8abac9" />
        </linearGradient>
      </defs>
      <rect
        x="0"
        y="0"
        width="280"
        height="394"
        rx="20"
        fill="url(#gradient)"
      />
      <rect
        x="10"
        y="10"
        width="260"
        height="374"
        rx="15"
        stroke="#c9eaf0"
        strokeWidth="8"
        fill="none"
      />
    </>
  );

  return (
    <div
      ref={setNodeRef}
      style={style}
      {...listeners}
      {...attributes}
      aria-label={`${rank} of ${suit}`}
    >
      <svg
        viewBox="0 0 280 394"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className="w-[20vw] max-w-[150px] min-w-[100px]"
        preserveAspectRatio="xMidYMid meet"
      >
        {cardContent}
      </svg>
    </div>
  );
};

export default Card;

================
File: src/app/components/meld.tsx
================
import React from "react";
import {
  horizontalListSortingStrategy,
  SortableContext,
} from "@dnd-kit/sortable";
import { useDroppable } from "@dnd-kit/core";

interface MeldProps {
  id: string;
  cardIds: string[];
  children?: React.ReactNode;
}

const Meld: React.FC<MeldProps> = ({ id, cardIds, children }) => {
  const { setNodeRef } = useDroppable({ id });
  
  return (
    <div className="relative w-full">
      {/* Larger hit area div */}
      <div 
        ref={setNodeRef}
        className={`
          absolute 
          inset-0 
          -m-4
        `} 
      />
      
      <SortableContext items={cardIds} strategy={horizontalListSortingStrategy}>
        <div
          className={`
            relative
            h-fit
            w-full
            flex
            items-center
            justify-center
            z-0
          `}
        >
          <div className="flex -space-x-24 items-center justify-center pointer-events-none">
            {React.Children.map(children, (child) => (
              <div
                className={`
                  transform
                  pointer-events-auto 
                  transition-all 
                  duration-300 
                  hover:-translate-y-4
                `}
              >
                {child}
              </div>
            ))}
          </div>
        </div>
      </SortableContext>
    </div>
  );
};

export default Meld;

================
File: src/app/types/cards.d.ts
================
export type Rank = "King" | "Queen" | "Jack" | "Ace" | number;
export type Suit = "Spades" | "Clubs" | "Diamonds" | "Hearts";

export interface CardData {
  id: string;
  rank: Rank;
  suit: Suit;
  isFaceUp: boolean;
}

export interface MeldData {
  id: string;
  cards: CardData[];
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
"use client";

import { useState } from "react";
import {
  DndContext,
  DragEndEvent,
  DragStartEvent,
  DragOverlay,
} from "@dnd-kit/core";
import { arrayMove } from "@dnd-kit/sortable";
import { nanoid } from "nanoid";
import Meld from "./components/meld";
import Card from "./components/card";
import { CardData } from "./types/cards";

const getColor = (suit: string) =>
  ["Hearts", "Diamonds"].includes(suit) ? "Red" : "Black";

export default function Home() {
  const [melds, setMelds] = useState<{ [key: string]: CardData[] }>({
    meld1: [
      { id: nanoid(), rank: "Ace", suit: "Spades", isFaceUp: true },
      { id: nanoid(), rank: "Ace", suit: "Hearts", isFaceUp: true },
      { id: nanoid(), rank: "Ace", suit: "Diamonds", isFaceUp: true },
      { id: nanoid(), rank: "Ace", suit: "Clubs", isFaceUp: true },
    ],
    meld2: [
      { id: nanoid(), rank: 2, suit: "Hearts", isFaceUp: true },
      { id: nanoid(), rank: 3, suit: "Hearts", isFaceUp: true },
      { id: nanoid(), rank: 4, suit: "Hearts", isFaceUp: true },
    ],
    meld3: [
      { id: nanoid(), rank: 7, suit: "Clubs", isFaceUp: true },
      { id: nanoid(), rank: 8, suit: "Clubs", isFaceUp: true },
      { id: nanoid(), rank: 9, suit: "Clubs", isFaceUp: true },
    ],
  });
  const [activeCard, setActiveCard] = useState<CardData | null>(null);

  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const allCards = Object.values(melds).flat();
    const draggedCard = allCards.find((card) => card.id === active.id);
    if (draggedCard) {
      setActiveCard(draggedCard);
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    setActiveCard(null);

    if (!over) return;

    const sourceMeldId = Object.entries(melds).find((entry) =>
      entry[1].some((card) => card.id === active.id)
    )?.[0];

    const targetMeldId = Object.entries(melds).find((entry) =>
      entry[1].some((card) => card.id === over.id)
    )?.[0];

    if (targetMeldId) {
      if (sourceMeldId === targetMeldId) {
        // Reordering within the same meld
        const oldIndex = melds[targetMeldId].findIndex(
          (card) => card.id === active.id
        );
        const newIndex = melds[targetMeldId].findIndex(
          (card) => card.id === over.id
        );

        if (oldIndex !== -1 && newIndex !== -1) {
          setMelds((prev) => ({
            ...prev,
            [targetMeldId]: arrayMove(prev[targetMeldId], oldIndex, newIndex),
          }));
        }
      } else if (sourceMeldId) {
        // Moving card between melds when dropped on a specific card
        const draggedCard = melds[sourceMeldId].find(
          (card) => card.id === active.id
        );
        if (draggedCard) {
          const targetIndex = melds[targetMeldId].findIndex(
            (card) => card.id === over.id
          );
          setMelds((prev) => ({
            ...prev,
            [sourceMeldId]: prev[sourceMeldId].filter(
              (card) => card.id !== active.id
            ),
            [targetMeldId]: [
              ...prev[targetMeldId].slice(0, targetIndex + 1),
              draggedCard,
              ...prev[targetMeldId].slice(targetIndex + 1),
            ],
          }));
        }
      }
    }
  };

  return (
    <DndContext
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}

    >
      <div className="h-fit w-fit p-4 flex flex-row row-span-3 items-center justify-center space-x-4">
        {/* Melds */}
        <Meld id="meld1" cardIds={melds.meld1.map((card) => card.id)}>
          {melds.meld1.map((card) => (
            <Card
              key={card.id}
              id={card.id}
              rank={card.rank}
              suit={card.suit}
              color={getColor(card.suit)}
              isFaceUp={card.isFaceUp}
            />
          ))}
        </Meld>

        <Meld id="meld2" cardIds={melds.meld2.map((card) => card.id)}>
          {melds.meld2.map((card) => (
            <Card
              key={card.id}
              id={card.id}
              rank={card.rank}
              suit={card.suit}
              color={getColor(card.suit)}
              isFaceUp={card.isFaceUp}
            />
          ))}
        </Meld>

        <Meld id="meld3" cardIds={melds.meld3.map((card) => card.id)}>
          {melds.meld3.map((card) => (
            <Card
              key={card.id}
              id={card.id}
              rank={card.rank}
              suit={card.suit}
              color={getColor(card.suit)}
              isFaceUp={card.isFaceUp}
            />
          ))}
        </Meld>
      </div>

      <DragOverlay>
        {activeCard ? (
          <Card
            id={activeCard.id}
            rank={activeCard.rank}
            suit={activeCard.suit}
            color={getColor(activeCard.suit)}
            isFaceUp={activeCard.isFaceUp}
          />
        ) : null}
      </DragOverlay>
    </DndContext>
  );
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "project-ace",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.0",
    "@dnd-kit/sortable": "^10.0.0",
    "nanoid": "^5.0.9",
    "next": "15.0.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
